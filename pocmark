#!/usr/bin/perl
use strict;
use Archive::Extract;
use File::Basename;
use File::Find;
use File::Path qw{remove_tree};
use File::Slurp qw{read_file};
use IO::Handle;
use LWP::Simple;
use LWP::UserAgent ();
use Tk;

sub getans($$);
sub inst($);
sub p(@);
sub rmtree($);

my ($ua, $aopath, $installto);
my $mw = MainWindow->new(-background=>'white');
$mw->geometry("600x400");
$mw->title("Piece Of Candy Updater");

$mw->after(10, \&rest);
$mw->MainLoop;

sub rest {
    STDOUT->autoflush(1);

    $ua = LWP::UserAgent->new;
    $ua->timeout(10);
    $ua->env_proxy;
    $ua->agent('Mozilla/5.0 (Windows NT 6.1; WOW64; rv:37.0) Gecko/20100101 Firefox/37.0');
    my $response = $ua->get('http://www.esoui.com/downloads/info1896-PieceofCandy.html');

    my $v;
    if (!$response->is_success) {
        p "!Couldn't get current POC version.  esoui.com said:", $response->status_line;
    } else {
        $v = ($response->decoded_content =~ m{<div id="version">Version:\s*([\d.]+)\s*</div>}so)[0];
        if (!$v) {
            p "!Couldn't find current POC version at esoui.com";
        } else {
            p "Current version of POC at esoui.com: $v\n";
        }
    }

    p '';
    p "Searching AddOns directory for POC...";
    # $aopath = $ENV{USERPROFILE} . '\Documents\Elder Scrolls Online\live\AddOns';
    $aopath = '"' . $ENV{SYSTEMDRIVE} . '\users\*\Documents\Elder Scrolls Online\live\AddOns"';
    my @found = ();
    find(sub {push @found, $File::Find::dir if $_ eq 'POC.txt'}, glob $aopath);
    p "...done\n";
    p '';

    my $doit = 0;
    my $uptodate = 0;
    my $error = 0;
    for my $d (sort @found) {
        $d =~ s{/}{\\}g;
        $_ = (read_file("$d\\POC.txt") =~ /^##\s+Version:\s+(\S+)/mo)[0];
        if (!$_) {
            p "Found POC.txt in $d but no version???\n";
        } else {
            p "Directory: $d is version $_\n";
            if ($d !~ m{\\Elder Scrolls Online\\live\\AddOns\\POC$}oi) {
                p "!POC should not be installed here.\n";
                getans("Should I delete this directory?", sub {rmtree $d});
            } elsif ($_ eq $v) {
                p "You are up-to-date.\n";
                $uptodate = 1;
            } elsif (defined $installto) {
                p "Multiple copies of POC detected: $installto / $d\n";
                $uptodate = 1;  # not really
            } else {
                $installto = dirname($d);
                p "!!! You are not up-to-date!\n";
                p "";
            }
        }
    }
    getans("Install version $v?", sub {inst($v)}) unless $uptodate;

    $mw->Button(-text => "Close", -command =>sub{exit})->pack(-side=>'bottom');
    $mw->update;
}

sub inst($) {
    my $v = shift;
    $installto //= $ENV{USERPROFILE} . '\Documents\Elder Scrolls Online\live\AddOns\\POC';
    my $zip = $ENV{TEMP} . "/POC-$v.zip";
    open my $fd, '>', $zip;
    binmode $fd;
    my $response = $ua->get("http://www.esoui.com/downloads/dl1896/POC-$v.zip");
    if (!$response->is_success) {
        p "Couldn't retrieve POC-$v.zip esoui.com said: ", $response->status_line, "\n";
    } else {
        print $fd $response->decoded_content;
        close $fd;
        rmtree("$installto\\POC");
        p "Extracting from: $zip...";
        my $ae = Archive::Extract->new(archive => $zip);
        $ae->extract(to=>$installto);
        p "done\n";
    }
}

my @saved = ();
sub p(@) {
    my $txt = "@saved@_";
    my $nl = chomp $txt;
    my $color;
    if (substr($txt, 0, 1) ne '!') {
        $color = 'black';
    } else {
        substr($txt, 0, 1) = '';
        $color = 'red';
    }
    $txt = "\n" unless length $txt;
    my $x = $mw->Label(-text=>$txt, -background=>'white', -foreground=>$color);
    $x->pack;
    $mw->update;
    if ($nl) {
        @saved = ();
    } else {
        @saved = $txt;
        $x->packForget;
    }
}

sub getans($$) {
    my $txt = shift;
    my $sub = shift;
    my $label = $mw->Label(-text=>$txt, -background=>'white', -foreground=>'blue');
    my $yes = $mw->Button(-text=>'Do It!', -command=>$sub);
    $mw->MainLoop;
    $label->pack();
    $yes->pack();
    p '';
    # $label->destroy();
    # $yes->destroy();
    # $no->destroy();
}

sub rmtree($) {
    my $dir = shift;
    p "Cleaning $dir...";
    remove_tree($dir);
    p "done\n";
}
